---
- block:
  - name: KylinCloud | Getting sonarqube host
    shell: >
      {{ bin_dir }}/kubectl get cm -n kylincloud-system kylincloud-config -o jsonpath='{.data.kylincloud\.yaml}' | grep "sonarQube:" -A 2 | grep "host" | awk '{print $2}'
    register: sonarqube_host

  - name: KylinCloud | Getting sonarqube token
    shell: >
      {{ bin_dir }}/kubectl get cm -n kylincloud-system kylincloud-config -o jsonpath='{.data.kylincloud\.yaml}' | grep "sonarQube:" -A 2 | grep "token" | awk '{print $2}'
    register: sonarqube_token
  when:
    - devops.sonarqube is not defined

- set_fact:
    sonarQubeHost: "{{ sonarqube_host.stdout }}"
    sonarQubeToken: "{{ sonarqube_token.stdout }}"
  when:
    - sonarqube_host is defined and sonarqube_host.stdout is defined and sonarqube_host.stdout != ""
    - sonarqube_token is defined and sonarqube_token.stdout is defined and sonarqube_token.stdout != ""

- set_fact:
    sonarQubeHost: "{{ devops.sonarqube.externalSonarUrl }}"
    sonarQubeToken: "{{ devops.sonarqube.externalSonarToken }}"
  when:
    - devops.sonarqube is defined
    - devops.sonarqube.externalSonarUrl is defined
    - devops.sonarqube.externalSonarToken is defined

- block:
  - name: KylinCloud | Getting es host
    shell: >
      {{ bin_dir }}/kubectl get cm -n kylincloud-system kylincloud-config -o jsonpath='{.data.kylincloud\.yaml}' | grep "logging:" -A 2 | grep "host" | awk '{print $2}'
    register: es_host

  - name: KylinCloud | Getting es index prefix
    shell: >
      {{ bin_dir }}/kubectl get cm -n kylincloud-system kylincloud-config -o jsonpath='{.data.kylincloud\.yaml}' | grep "logging:" -A 2 | grep "indexPrefix" | awk '{print $2}'
    register: es_indexPrefix

- set_fact:
    esHost: "{{ es_host.stdout }}"
    esIndexPrefix: "{{ es_indexPrefix.stdout }}"
  when:
    - es_host is defined and es_host.stdout is defined and es_host.stdout != ""
    - es_indexPrefix is defined and es_indexPrefix.stdout is defined and es_indexPrefix.stdout != ""

- name: KylinCloud | Getting token
  shell: >
    {{ bin_dir }}/kubectl get secret kylincloud-secret -o jsonpath='{.data.token}' | base64 -d
  register: ks_token_str

- name: KylinCloud | Getting ks-secret
  shell: >
    {{ bin_dir }}/kubectl get secret kylincloud-secret -o jsonpath='{.data.secret}' | base64 -d
  register: ks_secret_str

- name: KylinCloud | Checking Kubernetes version
  shell: >
    {{ bin_dir }}/kubectl version -o json | jq '.serverVersion.gitVersion' | sed s/\"//g
  register: kubernetes_version

- debug:
    msg: Current Kubernetes version is {{kubernetes_version.stdout}}

# Get the matched kubectl image
- name: KylinCloud | Setting kubectl image version
  set_fact:
    ks_kubectl_tag: "{{item.value}}"
    kubectl_break: true
  loop: "{{ query('dict', ks_kubectl_versions) }}"
  when:
    - kubectl_break is undefined and kubernetes_version is defined and kubernetes_version.stdout is version(item.key, '>=')

- debug:
    msg: Current kubectl image version is {{ks_kubectl_tag}}

- name: KylinCloud | Getting Kubernetes master num
  shell: >
    {{ bin_dir }}/kubectl get node | awk '{if(NR>1){print $3}}' | grep master | wc -l
  register: masters
  failed_when: false


- name: KylinCloud | Setting master num
  set_fact:
    enableHA: >-
      {% if masters is defined and masters.stdout is defined and masters.stdout != "0" and masters.stdout != "1" %}true{% else %}false{% endif %}
  when:
    - enableHA is not defined

- name: OpenPitrix | Check OpenPitrix v3.0.0
  shell: >
    {{ bin_dir }}/kubectl get deploy openpitrix-hyperpitrix-deployment -n openpitrix-system 2>1 -oNAME | wc -l
  register: openpitrix_deploy_count

- set_fact:
    OPMigrate: true
  when:
    - openpitrix_deploy_count.stdout == "1"

- name: KylinCloud | Creating manifests
  template:
    src: "{{ item.file }}.j2"
    dest: "{{ kylincloud_dir }}/{{ item.file }}"
  with_items:
    - { name: kylincloud-config, file: kylincloud-config.yaml, type: cm }


- name: KylinCloud | Initing KylinCloud
  shell: "{{ bin_dir }}/kubectl apply -f {{ kylincloud_dir }}/{{ item }}"
  loop:
    - "kylincloud-config.yaml"
  register: import
  failed_when: "import.stderr and 'AlreadyExists' not in import.stderr"

- import_tasks: ks-restart.yaml
