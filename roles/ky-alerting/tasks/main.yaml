---

- name: ky-alerting | Getting ky-alerting installation files
  copy:
    src: "{{ item }}"
    dest: "{{ kylincloud_dir }}/"
  loop:
    - alerting

- name: ky-alerting | Getting kylincloud-secret
  shell: >
    {{ bin_dir }}/kubectl -n kylincloud-system get secret kylincloud-secret -o jsonpath='{.data.token}' | base64 -d
  register: ks_token_str

- name: ky-alerting | Creating manifests
  template:
    src: "{{ item.file }}.j2"
    dest: "{{ kylincloud_dir }}/alerting/{{ item.file }}"
  with_items:
    - { type: job, file: alerting-db-init-job.yaml }
    - { type: job, file: alerting-db-ctrl-job.yaml }
    - { type: deploy, file: 1-executor.yaml }
    - { type: deploy, file: 2-watcher.yaml }
    - { type: deploy, file: 3-manager.yaml }
    - { type: deploy, file: 4-client.yaml }


- block:
    - name: ky-alerting | Checking db-ctrl-job
      shell: >
        {{ bin_dir }}/kubectl get job -n kylincloud-alerting-system
      register: result


    - name: ky-alerting | Deleting db-ctrl-job
      shell: >
        {{ bin_dir }}/kubectl -n kylincloud-alerting-system delete jobs.batch alerting-db-ctrl-job
      when: result.stdout.find("alerting-db-ctrl-job") != -1


    - name: ky-alerting | Deleting db-init-job
      shell: >
        {{ bin_dir }}/kubectl -n kylincloud-alerting-system delete jobs.batch alerting-db-init-job
      when: result.stdout.find("alerting-db-init-job") != -1


    - name: ky-alerting | Creating ky-alerting rolebinding
      shell: >
        {{ bin_dir }}/kubectl apply -f {{ kylincloud_dir }}/alerting/0-defaultrolebinding.yaml


    - name: ky-alerting | Initing ky-alerting db
      shell: >
        {{ bin_dir }}/kubectl apply -f {{ kylincloud_dir }}/alerting/alerting-db-init-job.yaml


    - name: ky-alerting | Creating ky-alerting mysql ctrl
      shell: >
        {{ bin_dir }}/kubectl apply -f {{ kylincloud_dir }}/alerting/alerting-db-ctrl-job.yaml


    - name: ky-alerting | Creating ky-alerting watcher
      shell: >
        {{ bin_dir }}/kubectl apply -f {{ kylincloud_dir }}/alerting/2-watcher.yaml


    - name: ky-alerting | Creating ky-alerting manager
      shell: >
        {{ bin_dir }}/kubectl apply -f {{ kylincloud_dir }}/alerting/3-manager.yaml


    - name: ky-alerting | Creating ky-alerting apigateway
      shell: >
        {{ bin_dir }}/kubectl apply -f {{ kylincloud_dir }}/alerting/4-client.yaml
  when:
    - "status.alerting is not defined or status.alerting.status is not defined or status.alerting.status != 'enabled'"


- name: ky-alerting | Creating ky-alerting executor
  shell: >
    {{ bin_dir }}/kubectl apply -f {{ kylincloud_dir }}/alerting/1-executor.yaml


- name: ky-alerting | Importing ky-alerting status
  shell: >
    {{ bin_dir }}/kubectl patch cc ks-installer
    --type merge
    -p '{"status": {"alerting": {"status": "enabled", "enabledTime": "{{ lookup('pipe','date  +%Y-%m-%dT%H:%M:%S%Z') }}"}}}'
    -n kylincloud-system
  register: import
  failed_when: "import.stderr and 'Warning' not in import.stderr"
  until: import is succeeded
  retries: 5
  delay: 3

